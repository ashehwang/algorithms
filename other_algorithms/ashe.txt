Tips for Solving Whiteboard problems
Why Whiteboard Problems?
Things the interviewer will be looking for:

Can you think algorithmically? Can you think about efficiency?
Are you a good communicator? Are you someone I want to think through a new feature with?
Can you code? Can you code neatly and correctly?
Before you start
Ask questions. Don't rush, it's a problem-solving demo, not a speed-coding test.

What are we optimizing for? Time? Space?
Are there any constraints on the input set?
If you draw a blank

Make up a sample input and compute it. Do this two or three times aloud.
Find a naive solution, any solution, to get started. Then you can optimize.
Come up with a simpler version of the problem, solve it, then progressively add complexity.
Think aloud about the likely bounds on efficiency for your solution.
This is an easy way to score points.
"What's sure is I'll have to iterate through all the points, so it's at least linear time."
"The problem is trivial when the set is sorted. So it can definitely be done in nLOGn time. Let's see if we can do better than n Log n."
During the Problem
The nice thing about white boards is you and the interviewer are facing the same direction.
Convince yourself that you are solving the problem together. Say "we" instead of "I".
Don't stop until they tell you to.
Style

Be confident; even if you don't know the answer, try to engage the problem, don't give up. If you keep telling an interviewer you don't know how to do something, they'll start to believe you.
Talk through the problem; they want to see the process going on in your head. If you don't talk, the interviewer doesn't learn how you break-down and analyze a problem.
The interviewer may give you hints. They will ask questions to keep you on track. Don't be flustered or think you're failing; this is normal.
If they ask you "does this work", take a moment to think. Walk through the steps; out loud is fine. If you say yes, say it like you believe it; interviewers don't like to think people are just praying they'll get the answer right.
Listen to the interviewer. They are trying to help you. No one likes someone who doesn't listen.
Keep a mental list of general strategies you can turn to. Here are a few:

Bucketizing with a hash: If the input set is bounded, try organizing it into a hash.
Ex: Sort an array of 100,000 integers that are all in the range 1-100
Dynamic programming, or "divide and conquer": Divide into smaller and smaller but equal subproblems.
Ex: See this solution for a Google interview question.
Look for useful mathematical properties.
Sometimes you have individual values when really what you care about is their sums.
Ex: For an array of integers 1 - 100 where all elements appear once except one that appears twice, find the repeat.
Amortized analysis: it's ok to do something memory- or space-intensive if you can prove that this cost comes with a greater payoff.
Ex: Implement a queue using two stacks.
Keep a stack or a queue on the side to track values as your algorithm goes through the problem.
Keep two pointers for the same iteration.
Ex: Reverse a string in place (ie. using no more memory space than the length of the string).
Perform an operation twice.
Ex: Reverse the word order of a string, but not the letters within the words.
Sort the input.
Ex: Finding anagrams.
Approach the problem from the other end.
Ex: see this solution for a Fog Creek interview question.
Use binary numbers instead of decimal numbers.
Ex: see the famous Bad King problem.
For efficiency, use binary search instead of incrementation. Esp. good for implementing math operators.
Ex: Implement division without using "/", in less than O(n) time.
Don't be Sly
If you don't understand the problem, ask for clarification. A well-formulated question is as impressive as a good answer. If you don't know something, don't make it up. Tell the interviewer you don't know and then try your best guess. Many interiewers will really like this. Same thing when you hit a snag. Don't try to cover things up and make it look like you were on the right track. Explain to the interviewer why you think the current hypothesis actually won't work.

How to handle questions you’ve seen before.
What if you get a whiteboard problem you already know the solution to? Obviously the ethical thing is to tell your interviewer you’ve seen the problem before and you’ll get points for that. Put on a sad face to show you were excited about solving a new problem.

Furthermore, you won’t necessarily perform better on a question you’ve seen. You’ll probably solve it faster, but speed is overrated. On the other hand, it’s much harder to show your interviewer how you think when you’re really just recalling a solution. Note that the easiest parts of a problem are also the hardest to remember. So even if you confound your interviewer, they’ll be left wondering why you breezed through the hardest part of the problem whiling stumbling on the rest. That’s a failure to demonstrate how you think, which is the real purpose of a whiteboard problem.

print("Hello World")
char_name = "Ashe"
print("Hello" + char_name + "!")
is_male = True || False

\n : change lines in strings
\" : quotation mark in string 

string.lower() : all lower case for string
string.upper() : all upper case
string.isupper() : boolean if all is upper

phrase.upper().isupper() : gives True back
len(phrase) : gives length back
phrase.index("G") returns index of "G" ; first one 
phrase.index("Aca") 
phrase.replace("Giraffe", "Elephant")

str(5) : convert number into string ; need to convert to string if you want to print together along with another string
abs(-7) : 7
pow(base, power) pow(3, 2) = 9
max(1,2,3,4,5) 
round(2.3 ): 2 
round(6.9) : 7

from math import * (grabs all math functions)

floor(3.7) gets 3
ceil(3.7) round up to get 4
sqrt(36) : 6

look up math functions in python

name = input("Enter your name: ")
print("Hello, " + name + "!")

int(num1) float(num2)

List = Array

friends[1:] 1 and beyond
friends[1:3] = friends[1...3]
friends.extend(lucky_numbers) add array to array into one array
friends.append("Creed")
friends.insert(1, "kelly") 
friends.remove("Jim")
friends.clear()
friends.pop()
friends.count("Jim")
friends.sort()
array.copy()

Tupel

coordinates = (4,5)  Tupels are immutable; can access via index coordinates[1]
is_male = True
is_tall = True

if is_male or is_tall:
   print("You are a male")
elif is_male and not(is_tall):
   print("You are a short male")
else:
   print("You are not a male")

if is_male and is_tall:

Dictionary(Hash)

Hash.get("key", "Not a valid key") (default value)

While Loop
secret_word = "giraffe"
guess = ""
guess_count = 0
guess_limit = 3
out_of_guesses = False

while guess != secret_word and not(out_of_guesses):
   if guess_count < guess_limit:
       guess = input("Enter guess: ")
       guess_count += 1
   else:
       out_of_guesses = True

if not(out_of_guesses):
   print("You win!!")
else:
   print("You lose!")

For Loop
for letter in "Giraffe Academy":
   print(letter)
in array shows each element; for string each character

for index in range(10):
	print(index) => prints 0~9
	range(3,10) => prints 3~9

print(2**3) = 8
def raise_to_power(base, power):
   result = 1
   for index in range(power):
       result *= base
   return result

print(raise_to_power(2,12))

number_grid = [
   [1,2,3],
   [4,5,6],
   [7,8,9],
   [0]
] # 4 rows 3 columns

for row in number_grid:
   for col in row:
       print(col) # nested for loop
 try:
	number = int(input("enter a num: ")
except:
	print("Invalid input")
except ZerodivisionError as err:
	print(err)

employee_file = open("employees.txt", "r(ead) / a(ppend), w(rite?), r+ read and write")
print(employee_fild.readline()) or .read() .readlines() gives array
employee_file.close()

class Student:

   def __init__(self, name, major, gpa, is_on_probation):
       self.name = name
       self.major = major
       self.gpa = gpa
       self.is_on_probation = is_on_probation

   def is_honors(self):
       return self.gpa >= 3.5

student1 = Student("Jim", "Business", 3.1, False)
print(student1)
print(student1.is_honors())

class ChineseChef(Chef):
   def make_fried_rice(self):
       print("The chef makes fried rice")


